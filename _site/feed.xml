<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-08T01:40:05+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Antithetical Parallels</title><subtitle>My Ramblings -</subtitle><author><name>TestSubjector</name></author><entry><title type="html">The Rise Of Nations Taunt Telegram Bot</title><link href="http://localhost:4000/blog/2020/05/08/The-Rise-Of-Nations-Taunt-Telegram-Bot" rel="alternate" type="text/html" title="The Rise Of Nations Taunt Telegram Bot" /><published>2020-05-08T00:00:00+05:30</published><updated>2020-05-08T00:00:00+05:30</updated><id>http://localhost:4000/blog/2020/05/08/The-Rise-Of-Nations-Taunt-Telegram-Bot</id><content type="html" xml:base="http://localhost:4000/blog/2020/05/08/The-Rise-Of-Nations-Taunt-Telegram-Bot">&lt;hr /&gt;
&lt;p&gt;My adventures with bots in the Telegram app continues.&lt;/p&gt;

&lt;p&gt;I have a group chat on Telegram with my college wingmates, folks that have lived adjacent to
for almost four years of my undergraduate hostel life. A few days back, one of said wingmates went and
sent forth on the group the message &lt;em&gt;Taunt 3&lt;/em&gt; in response to some discussion.&lt;/p&gt;

&lt;p&gt;Now for a bit of a background, this message in question is a command found in the video game &lt;a href=&quot;https://en.wikipedia.org/wiki/Rise_of_Nations&quot;&gt;Rise of Nations&lt;/a&gt; or
RoN, by Microsoft.
It is one of the many taunt commands that essentially plays a short voice clip in game when used. Examples of 
such voice lines include &lt;em&gt;Taunt 8 - (I need Oil)&lt;/em&gt; or &lt;em&gt;Taunt 60 - (Random! Random!)&lt;/em&gt; &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;em&gt;Taunt 3 was for (Maybe)&lt;/em&gt;, and while the actual voice clip did not play in the chat, everyone understood what that specific friend wanted to convey through.&lt;/p&gt;

&lt;p&gt;It was at that point that I questioned myself that what was stopping us from having the actual voice clips play, when a message matching the RoN taunt command was sent to the group.
And what better way to do that then to use a Telegram bot to accomplish this task.&lt;/p&gt;

&lt;p&gt;Now I’ve used the &lt;a href=&quot;https://github.com/python-telegram-bot&quot;&gt;Python Telegram library&lt;/a&gt; for this specific bot. The reason being that it has a much better developed API interface and is a much more mature library compared to any other library out there. The bot is persistent and in every execution cycle it parses every message that is passed in a group it is a part of. To allow a Telegram bot to have this access
to the messages of a group, you have to change the default privacy mode of the newly created bot using the &lt;a href=&quot;https://core.telegram.org/bots#6-botfather&quot;&gt;BotFather&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The bot will discard any message greater than a specific to avoid too much parsing of the message and decrease the burden on the bot.
The bot will essentially try to match the given message to a &lt;em&gt;Taunt X&lt;/em&gt; type format. The word taunt followed by a integer ranging from one to hundred, which encompasses all the default taunts in RoN.&lt;/p&gt;

&lt;p&gt;The most time consuming section of making this bot was the part where every Taunt had to be matched to a specific audio file. These matches were found via
creating a dictionary that matches every number to its specific audio file. And sadly, this had to be done manually as the audio file names did not correspond with their numbers. By this I mean that for say &lt;em&gt;Taunt 35&lt;/em&gt;, the relevant audio file is not called something like &lt;em&gt;taunt35.wav&lt;/em&gt; but instead &lt;em&gt;ships_ahoy-3.wav&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please &lt;a href=&quot;https://github.com/TestSubjector/RONTauntTelegramBot&quot;&gt;click here&lt;/a&gt; to go to the Github repository with the actual code of the bot&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;A friend of mine, &lt;a href=&quot;https://github.com/Nischay-Pro&quot;&gt;Nischay Ram&lt;/a&gt; improved the bot code by adding queues for &lt;a href=&quot;https://github.com/python-telegram-bot/python-telegram-bot/wiki/Avoiding-flood-limits&quot;&gt;flood prevention&lt;/a&gt;, created the ability for multi-taunts in one single message like &lt;em&gt;Taunt 33 84 1&lt;/em&gt; to be possible and even added the Age Of Empires’s (another videogame) taunt lines to the bots dictionary.&lt;/p&gt;

&lt;p&gt;In conclusion, I would like to inform the reader that the bot was a roaring success in our Telegram group. At least for some time, and then complaints against the spamming of the bot and of the barrage of large number of notifications meant that it is used much more sparingly now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://steamcommunity.com/app/287450/discussions/0/540744474731911106/&quot;&gt;Rise of Nation Taunt List&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/TestSubjector/RONTauntTelegramBot&quot;&gt;Github Repository&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>TestSubjector</name></author><summary type="html">My adventures with bots in the Telegram app continues.</summary></entry><entry><title type="html">The Julia Compilation Process</title><link href="http://localhost:4000/blog/2020/03/26/The-Julia-Compilation-Process" rel="alternate" type="text/html" title="The Julia Compilation Process" /><published>2020-03-26T00:00:00+05:30</published><updated>2020-03-26T00:00:00+05:30</updated><id>http://localhost:4000/blog/2020/03/26/The-Julia-Compilation-Process</id><content type="html" xml:base="http://localhost:4000/blog/2020/03/26/The-Julia-Compilation-Process">&lt;hr /&gt;
&lt;p&gt;A look at how Julia works in the background.&lt;/p&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;jit-compilation&quot;&gt;JIT Compilation&lt;/h5&gt;
&lt;hr /&gt;

&lt;p&gt;Julia has a just-in-time (JIT) compilation. This means that the code is
dynamically compiled during the execution of the program, also known as
the program run time. In this way the previous step of compiling the
code into an executable is completely excluded from consideration.&lt;/p&gt;

&lt;p&gt;The idea behind JIT compilation is to bring the benefits of both
(static) compilation and interpretation.&lt;/p&gt;

&lt;p&gt;JIT compilers can also do dynamic recompilation which is targeted
recompilation of certain sections of the codebase when the compiler
believes that the newly generated code will be more efficient, based on
information not available to a traditional static compiler. This
information in most cases is the run time environment in which the
program executes.&lt;/p&gt;

&lt;p&gt;How does the run time environment matter?&lt;/p&gt;

&lt;p&gt;During run time, interpreters have access to input parameters, control
flow, and target machine specifics. This information may change from run
to run or be unobtainable prior to run-time. Additionally, gathering
some types of information about a program before it runs may involve
algorithms which are undecidable using static analysis. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;warmup-delay&quot;&gt;Warmup delay&lt;/h5&gt;
&lt;hr /&gt;

&lt;p&gt;Due to the time taken by the JIT compiler to initially load the code and
compile it for the first time during an execution, there is an initial
lag in the runtime of a program. The Julia programming language, as a
dependent of the JIT compiler also accrue these delays. This is the main
reason for the repeated advice to do a &lt;em&gt;warmup call&lt;/em&gt; on any segment of
the code before it is benchmarked, so as to avoid incurring the
compilation time in the benchmark statistics.&lt;/p&gt;

&lt;p&gt;It is important to note that there are major differences between the
working of Julia’s JIT compiler and that of say Python. The compilation
target of Python is specialised bytecode which is then interpreted by
the CPython interpreter.&lt;/p&gt;

&lt;p&gt;In the case of Julia, there are four major level of disassembly steps
which transforms the source code directly to native machine code. This
adds to the compilation complexity, but in return helps Julia gain it’s
much vaunted speed.&lt;/p&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;julias-four-level-disassembly-compilation&quot;&gt;Julia’s Four Level Disassembly Compilation&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;We introduce the various stages of Julia compilation, their purpose and
a small insight into how to utilise the information given by them. Each
stage of Julia compilation has its own lowered form, an intermediate
representation of the original code in question.&lt;/p&gt;

&lt;p&gt;Let us declare and then call a test method &lt;em&gt;pos(x)&lt;/em&gt; which will return
the input argument x if x is greater than zero, otherwise it will return
zero in the same type (integer/float etc) as that of input x.&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; with&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The first step is the construction of the lowered code form, which is
used by the further type inference and code generation processes. In the
lowered form there are fewer types of nodes, all macros are expanded,
and all control flow is converted to explicit branches and sequences of
statements. This means transforming the method from Julia’s high-level
syntax (for example iterative statements or ternary operators) to a
smaller set of common primitives (for example gotos).&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_lowered&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CodeInfo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#3 if not %2&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The typed inferred incarnation of the code is similar to the lowered
form, but with expressions annotated with type information and some
generic function calls replaced with their implementations. The
code_typed macro presents a method implementation for a particular set
of argument types after type inference and inlining. More on this later.&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CodeInfo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slt_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#3 if not %1&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Julia uses the LLVM compiler framework to generate machine code. LLVM
defines an assembly-like language which it uses as a shared intermediate
representation (IR) between different compiler optimization passes and
other tools in the framework. Julia uses LLVM’s C++ API to construct the
LLVM IR in memory and then call some LLVM optimization passes on that
form. When you call \@code_llvm you see the LLVM IR after generation
and some high-level optimizations of the method.&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_llvm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;x&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nd&quot;&gt;@REPL&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@julia_pos_17096&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sgt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;
    &lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Since Julia executes native code, the last form a method implementation
takes is what the machine actually executes. This is just binary code in
memory, which is rather hard to read. The &quot;assembly language&quot; form of
the method represents the instructions and registers with names and some
form of simple syntax to help express what instructions do. In general,
assembly language remains fairly close to one-to-one correspondence with
machine code. In particular, one can always &quot;disassemble&quot; assembly
code into machine code.&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REPL&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;movq&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sarq&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;andnq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;retq&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nopl&lt;/span&gt;    &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
We mentioned that in the type inferred step, the compiler presents a
method implementation for a particular set of argument. Let us take an
example to highlight this. The entire process starts when the function
&lt;em&gt;pos(x)&lt;/em&gt; is called with say, an integer argument x = 1. The JIT compiler
now knows the type of x (which will be inferred in the &lt;em&gt;typed inferring
stage&lt;/em&gt; of the compilation process). Using this information, it can then
compile a specialised version of the pos(x) to handle integers. This is
stored in the memory.&lt;/p&gt;

&lt;p&gt;Suppose that the function &lt;em&gt;pos(x)&lt;/em&gt; is called again, however this time
the argument passed as x, is of the type float. The JIT compiler will
again infer the types of the variables wherever necessary in the
function and generate a new specialised version to handle this type of
argument.&lt;/p&gt;

&lt;p&gt;This entire feature is known as multiple dispatch. It can be perceived
that multiple dispatch is similar to static function overloading, found
in other languages but here the operation happens at runtime.&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CodeInfo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slt_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;└──&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#3 if not %1&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CodeInfo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt_float&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;└──&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#3 if not %1&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;type-instability&quot;&gt;Type Instability&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;Let us declare a modified test method &lt;em&gt;pos1(x)&lt;/em&gt; which will return the
value zero in integer type rather than in the type of x in the original
function, given that its return condition is fulfilled.&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
We can see that for an integer input x, the typed form of code is
exactly the same. However, the code complexity steeply increases for a
input x which is of floating value type.&lt;/p&gt;

&lt;p&gt;The reason for this is that zero is an integer (Int64 more specifically)
and x might be of any type. Thus depending one the value of x, this
modified method might return a value of either type, highlighted by
&lt;em&gt;UnionFloat64, Int64&lt;/em&gt; in the generated code. This is one example of
type-instability, which can lead to slowdown of code execution. One of
the reasons being that the compiler has to execute more number of
instructions to complete the same task (compare this typed pos1(x)
generated code with that of the code generated by pos(x)).&lt;/p&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CodeInfo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slt_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;└──&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#3 if not %1&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@code_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CodeInfo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sitofp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float64&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt_float&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq_float&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt_float&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;mf&quot;&gt;9.223372036854776e18&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptosi&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slt_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or_int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;└──&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#3 if not %9&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;─&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
One may ask that why doesn’t Julia enforce type-stability. Among the
multiple reasons, one strikingly important one is that Julia is not a
statically typed language. These type-stability issues exist in some
measure in all dynamic languages. Not enforcing type-stability also
allows the existence of a rich Julia type environment, allowing the
inclusion of parametric and dispatch types.&lt;/p&gt;

&lt;p&gt;Type-stability is much more important factor for Julia compared to
several other dynamic languages, and the reason for this was nicely
summarised by one of this language’s main developer -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&quot;Basically we can only produce good code, possibly among the best of
any code produced by JIT thanks to LLVM’s optimization passes, but can
only do so for good julia code (i.e. if you follow performance tip). If
you fail to do that, or write in a pattern that’s frequently seen in
R/python/JS, the performance will be much slower compare to other JIT
out there since the JIT for those languages has to deal with these code
so they implements a lot of speculative or profiling based optimizations
to get good performance.&quot;&lt;/em&gt; - Yichao Yu &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;In other words, Julia is a bit of a double edged sword. Written properly
it can be as fast as statically typed languages with its compilation
process. Written in a manner without keeping in mind the few general
guidelines to the language, it can be deceptively slow to work with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/857076.857077&quot;&gt;A Brief History of Just-in-Time&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://discourse.julialang.org/t/notes-on-the-julia-compiler-jit-vs-static/4275/2&quot;&gt;Notes On The Julia Compier JIT VS Static&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>TestSubjector</name></author><summary type="html">A look at how Julia works in the background.</summary></entry><entry><title type="html">New Year With LaTeX Support &amp;amp; Comment Changes</title><link href="http://localhost:4000/blog/2020/01/07/New-Year-With-LaTeX-Support-&-Comment-Changes" rel="alternate" type="text/html" title="New Year With LaTeX Support &amp; Comment Changes" /><published>2020-01-07T00:00:00+05:30</published><updated>2020-01-07T00:00:00+05:30</updated><id>http://localhost:4000/blog/2020/01/07/New-Year-With-LaTeX-Support-&amp;-Comment-Changes</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/07/New-Year-With-LaTeX-Support-&amp;-Comment-Changes">&lt;hr /&gt;
&lt;p&gt;It’s a new year!&lt;br /&gt;
Which means another go at this blog.&lt;br /&gt;
For &lt;script type=&quot;math/tex&quot;&gt;\forall posts \in blog&lt;/script&gt;, enable LaTeX.&lt;/p&gt;

&lt;p&gt;Additionally, I’ve shifted from &lt;em&gt;just-comments&lt;/em&gt; to the &lt;em&gt;&lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances.es&lt;/a&gt;&lt;/em&gt; widget. For a cleaner and less spam-ish comment interface.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">It’s a new year! Which means another go at this blog. For , enable LaTeX. Additionally, I’ve shifted from just-comments to the utterances.es widget. For a cleaner and less spam-ish comment interface.</summary></entry><entry><title type="html">Making A Simple Telegram Bot In Julia</title><link href="http://localhost:4000/blog/2019/03/17/Making-A-Simple-Telegram-Bot-In-Julia" rel="alternate" type="text/html" title="Making A Simple Telegram Bot In Julia" /><published>2019-03-17T00:00:00+05:30</published><updated>2019-03-17T00:00:00+05:30</updated><id>http://localhost:4000/blog/2019/03/17/Making-A-Simple-Telegram-Bot-In-Julia</id><content type="html" xml:base="http://localhost:4000/blog/2019/03/17/Making-A-Simple-Telegram-Bot-In-Julia">&lt;hr /&gt;
&lt;p&gt;So finding myself with some free time on hand and a persisting interest in Telegram bots due to my daily use of the FeedReaderBot (which I have talked about in a previous post), I decided to create a bot of my own. &lt;br /&gt;
And well, what better language to use than Julia? Yes, Python may have a much more developed series of libraries for making Telegram bots, but where is the fun in using that? &lt;br /&gt;
&lt;br /&gt;
Therefore, here I’ll be doing a quick run-through on how a simple bot called WikiRandom bot was made for Telegram. The purpose of the bot is very simple and concise i.e a user will ask the bot for a link to any random article on Wikipedia and the bot will respond with such a link.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of the bot in action - &lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/images/telegrambots/workinglist.png&quot; margin:=&quot;&quot; auto=&quot;&quot; alt=&quot;It's Alive!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Firstly, let’s start with a quick primer for those not familiar with the topic in hand.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Telegram?&lt;/strong&gt;&lt;br /&gt;
It is a chat application, similar to Messenger or WhatsApp with the added promise of being much more secure (and a clean UI!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a &lt;a href=&quot;https://core.telegram.org/bots&quot;&gt;Telegram Bot&lt;/a&gt;?&lt;/strong&gt;&lt;br /&gt;
Telegram provides this nifty feature known as bots, which are in essence small pieces of code wrapped up as a dummy account. You can communicate with the bot using valid commands and the bot responds to those commands based on how it is programmed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Julia?&lt;/strong&gt;&lt;br /&gt;
It is a good language to code in. Faster than Python (usually) but with code that looks like it’s a long lost brother to the Python syntax. For anything more than that, please find out by means of some healthy googling.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, we start looking into the actual approach to build our bot.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Creating a bot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before anything else, we need to have a bot to call our own. Bots in Telegram &lt;em&gt;are special accounts that do not require an additional phone number to set up&lt;/em&gt; and to make these special accounts Telegram provides an … in-built bot(!) called the &lt;a href=&quot;https://telegram.me/botfather&quot;&gt;BotFather&lt;/a&gt;. Once you have it running, it is pretty self explanatory in the way it is supposed to be used.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/images/telegrambots/botfather1.png&quot; margin:=&quot;&quot; auto=&quot;&quot; alt=&quot;The Botfather&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Communicating with your bot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the bot has been named, its details set up and after it has been adopted as an official child (do remember that adoption is invalid if the bot token is lost, which is also a sign of bad parenting), the next thing required is a way to communicate with it. Stumped? Well, no need to worry. In this highly introverted age, humans have made a marvellous tool called the application programming interface (APIs) to remove all unnecessary friendly social communication. &lt;a href=&quot;https://core.telegram.org/bots/api&quot;&gt;Telegram’s API&lt;/a&gt; is a party to this principle.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Wrappers and the beauty of the open-source world&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But wait, we plan to use Julia for this. How does one go about linking the language to the APIs i.e creating a wrapper library? This seems like a lot of effort. It’s all very simple really, you simply don’t make that effort. Someone else usually has done all that hard work already. And the person in question is &lt;a href=&quot;https://github.com/Moelf&quot;&gt;Moelf&lt;/a&gt; with his Julia wrapper library &lt;a href=&quot;https://github.com/Moelf/Telegrambot.jl&quot;&gt;Telegrambot.jl&lt;/a&gt;. Huge shoutout to him. You can also find his blog on the topic &lt;a href=&quot;https://blog.jling.dev/a-telegram-bot-in-julia/&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Getting the bot commands running&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the nitty-gritty now. First thing first is to get the &lt;a href=&quot;https://github.com/Moelf/Telegrambot.jl/blob/master/README.md&quot;&gt;example shown in the README&lt;/a&gt; for the Telegrambot.jl running. It’s a simple way to make sure that everything has been set up properly on all sides. After that is done, we direct ourselves on how to make our so called &lt;em&gt;random_wikipedia_page_giver&lt;/em&gt; bot.
&lt;br /&gt;&lt;br /&gt;
We would like to have a main() function, which will act as the placeholder where all the code runs -&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Telegrambot&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;botApi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get your own token, shoo!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;txtCmds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;txtCmds&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcomeMessage&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# this will respond to '/start'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;txtCmds&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;repeatmessage&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# this will respond to '/repeatmessage &amp;lt;any thing&amp;gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;txtCmds&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;randomarticle&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRandomWikiPage&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# this will give the random article we require&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inlineOpts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#Title, result pair&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;startBot&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;botApi&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txtCmds&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inlineQueryHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inlineOpts&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now the inner workings of the code will be understood by going through the docs but essentially the &lt;em&gt;txtCmnds&lt;/em&gt; are the text commands that will be given as input to the bot and in return the bot gives the expected response. The startBot method make sures that everything is running in a neat, tight loop. For example of a text command, here is the /&lt;em&gt;repeatmessage&lt;/em&gt; command in action.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/images/telegrambots/repeatmessage.png&quot; margin:=&quot;&quot; auto=&quot;&quot; alt=&quot;Repeat Message&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Bot Commands - Minor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The commands are functions themselves, so we can write them over in separate commands.jl file. The two simple commands are -&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This command gives a greeting to you, how polite&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; welcomeMessage&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AbstractString&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome, the most generic greeting ever&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Echo back whatever has been said by the user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; echo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AbstractString&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It’s time to digress a bit. There was an issue originally that could easily lead to using the welcomeMessage command (or some other command) to pretty quickly fill your console with warning messages - &lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/images/telegrambots/allstringstarterror.png&quot; margin:=&quot;&quot; auto=&quot;&quot; alt=&quot;Warnings everywhere&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
The details can be learned about in this &lt;a href=&quot;https://github.com/Moelf/Telegrambot.jl/issues/5&quot;&gt;issue&lt;/a&gt;. In brief, the way the wrapper code was set up required all commands to have a message(parameter) when sent to the bot (&lt;em&gt;/bot_command&lt;/em&gt; non_empty_message). Moelf fixed the issue by himself, adding other improvements to the code (even though I said I’ll do it, mid-semester exams made it impossible for me to quickly work on this). So this is a non-issue now.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Bot Command - Major&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;/randomarticle&lt;/em&gt; command, which will be the crux of our code requires two things. Since we need to get articles from Wikipedia randomly, it may appear at first glance that we will have to create a database of multiple links consisting of Wikipedia pages and randomly choose one of those links when a user gives a request. There is thankfully a simpler way to do this. Wikipedia has an API(who would have known it) that will automatically give you the metadata for a random page on Wikipedia.&lt;br /&gt;&lt;br /&gt;
All we now require is a way to communicate with this API. We use a Julia library called &lt;a href=&quot;https://github.com/JuliaWeb/HTTP.jl&quot;&gt;HTTP.jl&lt;/a&gt; for this purpose. With all the key ingredients ready, the final code for the command will look something like -&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; getRandomWikiPage&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AbstractString&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://en.wikipedia.org/w/api.php?action=query&amp;amp;list=random&amp;amp;format=json&amp;amp;rnnamespace=0&amp;amp;rnlimit=1&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;responseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# print(responseData)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;regexMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:\d+&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseData&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# print(regexMatch.match)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# return idMatch&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://en.wikipedia.org/?curid=&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idMatch&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From the return statement you can see that this function will return a (pseudo)random article link on Wikipedia to the user.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Packing up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A small problem that I’ve found people face difficulty with when using Julia is, in how to use functions across multiple files. The answer is &lt;em&gt;&lt;a href=&quot;https://docs.julialang.org/en/v1/manual/modules/index.html&quot;&gt;modules&lt;/a&gt;&lt;/em&gt;, _a nifty yet a somewhat back and forth experience (it has both import and using, cmon!). I usually refer to the way I saw modules being used back in my GSoC days with AstroLib.jl, when Julia was still at v0.6. The code for a module, stored in the file which I’ll call main_module.jl is -&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__precompile__&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_module&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WikiRandom.jl&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This contains the main function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;commands.jl&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This contains all the commands&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcomeMessage&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRandomWikiPage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Persistent Running&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So we have the bot, the module, the code and the commands ready. How to we get everything to run? Simple, make a small script to execute!&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;push!&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;LOAD_PATH&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/directory/containing/the/code&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# A somewhat annoying workaround required when using modules in Julia&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_module&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Perfect, now all you need to do is keep your system running 24/7 with the code executing in the background; so that the bot will be always up. Which, as you can see is a slight problem. What you need, is the cloud(or a Raspberry Pi and unlimited net, but I don’t have the former). To keep the bot persistent, I created a VM instance in Google Cloud for this purpose (many other cloud free-for-small-use-case services are not available in my region or problematic to set up with Julia. If someone knows of an alternative, please do tell). &lt;br /&gt;&lt;br /&gt;
Shift all the necessary code to the instance and a simple &lt;em&gt;nohup /path/to/julia/executable your_script_to_run_the_code.jl &amp;amp;&lt;/em&gt; command later, you have bot that you can access from Telegram anytime and share it with your friends and just feel happy seeing it in action. Until of course the free one-year Google subscription ends or till someone makes a half-hearted attempt at breaking the bot. &lt;br /&gt;&lt;br /&gt;
As of this moment(when the post appears online), the WikiRandom bot works - http://t.me/WikiRandomBot. Please have a go at using it (without trying to break it preferably). I may come back to this and improve the commands and response from the bots if I use it enough in the future. Or I could just revert the code back to when the bot was in its utopian form (shown below).
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/images/telegrambots/allstart.png&quot; margin:=&quot;&quot; auto=&quot;&quot; alt=&quot;Perfection&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading this roughly made article.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">So finding myself with some free time on hand and a persisting interest in Telegram bots due to my daily use of the FeedReaderBot (which I have talked about in a previous post), I decided to create a bot of my own. And well, what better language to use than Julia? Yes, Python may have a much more developed series of libraries for making Telegram bots, but where is the fun in using that? Therefore, here I’ll be doing a quick run-through on how a simple bot called WikiRandom bot was made for Telegram. The purpose of the bot is very simple and concise i.e a user will ask the bot for a link to any random article on Wikipedia and the bot will respond with such a link.</summary></entry><entry><title type="html">Comments Now Work On Pi Day</title><link href="http://localhost:4000/blog/2019/03/14/Comments-Now-Work-On-Pi-Day" rel="alternate" type="text/html" title="Comments Now Work On Pi Day" /><published>2019-03-14T00:00:00+05:30</published><updated>2019-03-14T00:00:00+05:30</updated><id>http://localhost:4000/blog/2019/03/14/Comments-Now-Work-On-Pi-Day</id><content type="html" xml:base="http://localhost:4000/blog/2019/03/14/Comments-Now-Work-On-Pi-Day">&lt;hr /&gt;
&lt;p&gt;Well, there’s not much of a Pi day celebration (or even mention) on our side of the world.&lt;br /&gt;
That’s simply because we go for a DD/MM format rather than peculiar MM/DD format for dates.&lt;br /&gt;
So we usually refer to this day as 14/03 rather than 03/14, which is…more bland yes.&lt;br /&gt;
There’s a small irony here, in the sense, that the dates for these posts (you can see it below the title of this post) require a YYYY-MM-DD format.&lt;br /&gt;
&lt;br /&gt;
Additionally, I’ve caved into giving an option for comments on all my posts (&lt;a href=&quot;https://60devs.com/adding-comments-to-your-jekyll-blog.html&quot;&gt;guidance taken from here&lt;/a&gt;). I’m sure this’ll go swimmingly. Pretty sure.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">Well, there’s not much of a Pi day celebration (or even mention) on our side of the world. That’s simply because we go for a DD/MM format rather than peculiar MM/DD format for dates. So we usually refer to this day as 14/03 rather than 03/14, which is…more bland yes. There’s a small irony here, in the sense, that the dates for these posts (you can see it below the title of this post) require a YYYY-MM-DD format. Additionally, I’ve caved into giving an option for comments on all my posts (guidance taken from here). I’m sure this’ll go swimmingly. Pretty sure.</summary></entry><entry><title type="html">Future Plans</title><link href="http://localhost:4000/blog/2018/12/11/Future-Plans" rel="alternate" type="text/html" title="Future Plans" /><published>2018-12-11T00:00:00+05:30</published><updated>2018-12-11T00:00:00+05:30</updated><id>http://localhost:4000/blog/2018/12/11/Future-Plans</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/11/Future-Plans">&lt;hr /&gt;
&lt;p&gt;The movie trailer for Kingdom Hearts 3 just came out. Saying it with brevity, it is such a beautiful capstone to the monument of memories the series has been, to so many people. Find it &lt;a href=&quot;https://www.youtube.com/watch?v=16N6IkhxprE&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This post is kinda of an important marker-type post, so please bear with the different pacing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;My 4-1 semester is at an end.
Some of the people I know actually took the option of early graduation, for them their college life will end in just a few days.
Many of my friends will leave/have left the campus. They’ll undergo their last few months of college working, in short, &lt;em&gt;“at some company, at some place”&lt;/em&gt;.
Me? Due to the perks of taking two degrees and receiving an on-campus thesis offer (and cause of a tiny problem), I potentially see myself staying here for another 2 years.
Oh boy!&lt;/p&gt;

&lt;p&gt;So, that’s a lot of time.
To do a lot of things.
Or just waste in its entirety.
To do the former and not the latter, is what I perceive this blog can help me with.
Which is why I’m here.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Speaking freely, I can potentially have to construct deep differential equations, write machine learning code in Julia for aerodynamic simulations, compete in BattleCode, play and become a pro at Artifact, work on AI problems, help create video animations, publish papers and earn money.
These objectives/goals are lofty.
It’s just that I don’t have much do otherwise now. So why not?&lt;/p&gt;

&lt;p&gt;Also, I went through some of the previous posts; agonized over the silly mistakes made (some were fixed); looked critically at the UI of the site (I don’t care what you say, it’s perfect I tell ya) and hope to make a lot of posts with stellar content for the future.&lt;/p&gt;

&lt;p&gt;Sigh, this is hard.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">The movie trailer for Kingdom Hearts 3 just came out. Saying it with brevity, it is such a beautiful capstone to the monument of memories the series has been, to so many people. Find it here.</summary></entry><entry><title type="html">Julia Context Free Grammar</title><link href="http://localhost:4000/blog/2018/10/21/Julia-Context-Free-Grammar" rel="alternate" type="text/html" title="Julia Context Free Grammar" /><published>2018-10-21T00:00:00+05:30</published><updated>2018-10-21T00:00:00+05:30</updated><id>http://localhost:4000/blog/2018/10/21/Julia-Context-Free-Grammar</id><content type="html" xml:base="http://localhost:4000/blog/2018/10/21/Julia-Context-Free-Grammar">&lt;hr /&gt;
&lt;p&gt;Gists in Github Pages, lovely.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/TestSubjector/6a407f9a4ba5996a1692c9b9f6c0eb84.js&quot;&gt;&lt;/script&gt;</content><author><name>TestSubjector</name></author><summary type="html">Gists in Github Pages, lovely.</summary></entry><entry><title type="html">Whiskquilibrium The Game</title><link href="http://localhost:4000/blog/2018/10/16/Whiskquilibrium-The-Game" rel="alternate" type="text/html" title="Whiskquilibrium The Game" /><published>2018-10-16T00:00:00+05:30</published><updated>2018-10-16T00:00:00+05:30</updated><id>http://localhost:4000/blog/2018/10/16/Whiskquilibrium-The-Game</id><content type="html" xml:base="http://localhost:4000/blog/2018/10/16/Whiskquilibrium-The-Game">&lt;hr /&gt;
&lt;p&gt;On 29th and 30th September, I had the chance to participate in the &lt;a href=&quot;https://megathon.in/&quot;&gt;Megathon Hackathon at IIIT Hyderabad&lt;/a&gt;.
Hackathons I feel, are a bit of a strange thing. The novelty of cooking something up in a day or two versus the knowledge that most of what will be churned out in such events will be empty air in mere hours.&lt;/p&gt;

&lt;p&gt;Still, it’s a good thing to try out at least once, especially if you’re in a coding slump.&lt;/p&gt;

&lt;p&gt;With a team consisting of me, &lt;a href=&quot;https://github.com/legobridge&quot;&gt;Kushal Agarwal&lt;/a&gt;, &lt;a href=&quot;https://github.com/shortstheory&quot;&gt;Arnav Dhamija&lt;/a&gt; and &lt;a href=&quot;https://github.com/Nischay-Pro&quot;&gt;Nischay Ram&lt;/a&gt; (appropriately called Team “CanWeGetBackToYouLater”), we devised and developed &lt;strong&gt;Whiskquilibrium&lt;/strong&gt;. A 2D platformer game in the Godot game engine.&lt;/p&gt;

&lt;p&gt;Here’s the PR promoting synopsis - &lt;em&gt;It involves a cat named “Minto” trapped in a quantum world. She has the ability to shift her state between being alive and a ghostly dead form. Her presence itself changes the nature of the world around her. Can you solve the obstacles in her path that prevent her from escaping this mad world she is in?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Essentially, the game consisted of a cat character that has the power to switch colors between white and black and has to clear several levels.&lt;/li&gt;
  &lt;li&gt;The blocks themselves in these levels are white, black or gray(level borders). The game mechanic is developed in the form of the cat being able to traverse through blocks of the same colour while being able to &lt;em&gt;paint&lt;/em&gt; the blocks of the opposite colour, when &lt;em&gt;you stop touching that block&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The cat can jump in its default black colour&lt;/li&gt;
  &lt;li&gt;The cat cannot jump when it switches to white(dead) state, but it gains the limited ability to fly which can be refilled by colouring up black blocks to white.&lt;/li&gt;
  &lt;li&gt;The number of switches possible in a level is limited.&lt;/li&gt;
  &lt;li&gt;The level can be reset at anytime (this is not a roguelike game &lt;em&gt;phew&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the sketches of the above mechanics, that we developed during the hackathon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/whiskquilibrium/tes1.gif&quot; width=&quot;600&quot; height=&quot;300&quot; alt=&quot;Colour/ Switch&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/images/whiskquilibrium/tes2.gif&quot; width=&quot;600&quot; height=&quot;300&quot; alt=&quot;Fly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The judging of the Game Dev section of the Hackathon was done by professionals from EA India (&lt;em&gt;insert jokes about DLCs here&lt;/em&gt;).
Suffice to say, we did not win the 1st (given to a team that used RPG Maker to make more than 20 levels of content) or the 2nd prize (given to a team who make a game using their on OpenGL game engine, which they had been working on more than a few months, highlighting a major problem in my opinion, of hackathons).&lt;/p&gt;

&lt;p&gt;Thankfully, we had a spot in the next 3 ranks (we were lazily not told the exact rank, since the &lt;strong&gt;prizes&lt;/strong&gt; for these 3 spots were the same).
&lt;img src=&quot;https://i.imgur.com/Jn5q0K1.jpg&quot; width=&quot;400&quot; height=&quot;300&quot; alt=&quot;The Prize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was actually very happy at the way the judges gave out their decisions to be honest. They had picked out people who had Ctrl C+V’ed almost all their code and assets from the net (essentially cheating). It was satisfying to watch them (those participants guilty of the aforementioned crime) being tongue-tied when the hard questions were asked.&lt;/p&gt;

&lt;p&gt;This hackathon actually helped me fulfill one my college goals. Make a proper effort at a developing a game. Who knows? If we are able to actually find the willpower, maybe we’ll polish this and release it on Steam.&lt;/p&gt;

&lt;p&gt;Game development, in itself…is a pain. We had four people in our team and around 18 hours of time to understand Godot and make something. I can remember at least 5 instances, where at least one of us was on the verge of screaming, killing the other three and dancing on their corpses. The essence and the main difficulty with game development that I felt was that everything in games are linked. It’s like how a real world problem behaves.
You want to change one move? Change everything that is dependent on that move!
You want to add visual indicators? Make sure that they -&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;follow the camera&lt;/li&gt;
  &lt;li&gt;are resized properly when the camera is zoomed in/out&lt;/li&gt;
  &lt;li&gt;do not lag behind key presses&lt;/li&gt;
  &lt;li&gt;look good&lt;/li&gt;
  &lt;li&gt;and work as they are supposed too&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when you are a novice (like we were), where and how to actually implement the above in a game engine is more than a bit of a pain.&lt;/p&gt;

&lt;p&gt;To conclude, the most amazing was that at the end of it all we were more than happy at what we had been able to accomplish at the hackathon. We were sleep deprived of course, but seeing the game actually came to life brought that small-persistent-warm-giddy feeling to our hearts. We had implemented sound effects. Sound effects!&lt;/p&gt;

&lt;p&gt;The reason I was felt a bit down though was because of a conclusion I had reached after the hackathon. That was while being an indie game developer will definitely be a fun and interesting career, you really need to be a bit of a masochist to be able to endure such a worklife.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">On 29th and 30th September, I had the chance to participate in the Megathon Hackathon at IIIT Hyderabad. Hackathons I feel, are a bit of a strange thing. The novelty of cooking something up in a day or two versus the knowledge that most of what will be churned out in such events will be empty air in mere hours.</summary></entry><entry><title type="html">Starting With Intro To Maching Learning Course 1- Naive Bayes</title><link href="http://localhost:4000/blog/2018/09/13/Starting-With-Intro-To-Maching-Learning-Course-1-Naive-Bayes" rel="alternate" type="text/html" title="Starting With Intro To Maching Learning Course 1- Naive Bayes" /><published>2018-09-13T00:00:00+05:30</published><updated>2018-09-13T00:00:00+05:30</updated><id>http://localhost:4000/blog/2018/09/13/Starting-With-Intro-To-Maching-Learning-Course-1--Naive%20Bayes</id><content type="html" xml:base="http://localhost:4000/blog/2018/09/13/Starting-With-Intro-To-Maching-Learning-Course-1-Naive-Bayes">&lt;hr /&gt;
&lt;p&gt;In essence, now that I’m in my 4th year, I need to think about my future. Unfortunately, as my academics can be currently be very aptly termed as a &lt;strong&gt;Disaster Zone&lt;/strong&gt;, I have to finally pick up the slack all-around. This is to make me capable of being able to bring food to my table, in the near future.&lt;br /&gt;
That, and I’m now really tired(read envious) of seeing other people achieve stuff and play games and have fun without a care in the world.&lt;/p&gt;

&lt;p&gt;Now, AI was something I wanted to get into as kid(and seeing everyone else suddenly get hyped about the same, in these last few years has been damn frustrating (The competition!)). 
Anyway, I can rant a lot about this to be sure; but let’s get on with the main topic.&lt;/p&gt;

&lt;p&gt;I’ve started with the basic of the basics, the Udacity course Introduction To Machine Learning. I’ll try to put up updates about this course as I go deeper into it. 
Maybe I’ll also put up some summary notes here in the future? Let’s try with a brief one.&lt;/p&gt;

&lt;p&gt;The first main topic, Naive Bayes can be (on the code side) be summed up by the following few lines -&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.naive_bayes&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GaussianNB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GaussianNB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shoutout to my &lt;a href=&quot;http://arnavdhamija.com/&quot;&gt;friend&lt;/a&gt; for prodding me to &lt;em&gt;attempt&lt;/em&gt; to blog again.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">In essence, now that I’m in my 4th year, I need to think about my future. Unfortunately, as my academics can be currently be very aptly termed as a Disaster Zone, I have to finally pick up the slack all-around. This is to make me capable of being able to bring food to my table, in the near future. That, and I’m now really tired(read envious) of seeing other people achieve stuff and play games and have fun without a care in the world. Now, AI was something I wanted to get into as kid(and seeing everyone else suddenly get hyped about the same, in these last few years has been damn frustrating (The competition!)). Anyway, I can rant a lot about this to be sure; but let’s get on with the main topic. I’ve started with the basic of the basics, the Udacity course Introduction To Machine Learning. I’ll try to put up updates about this course as I go deeper into it. Maybe I’ll also put up some summary notes here in the future? Let’s try with a brief one. The first main topic, Naive Bayes can be (on the code side) be summed up by the following few lines -</summary></entry><entry><title type="html">BattleCode Report</title><link href="http://localhost:4000/blog/2018/03/14/BattleCode-Report" rel="alternate" type="text/html" title="BattleCode Report" /><published>2018-03-14T00:00:00+05:30</published><updated>2018-03-14T00:00:00+05:30</updated><id>http://localhost:4000/blog/2018/03/14/BattleCode-Report</id><content type="html" xml:base="http://localhost:4000/blog/2018/03/14/BattleCode-Report">&lt;hr /&gt;
&lt;p&gt;Another very late post, I know.&lt;/p&gt;

&lt;p&gt;So, Team #369 - Markov Chain Gang, secured a position in the top 8-12th bracket of the International Qualifying bracket of BattleCode 2018.
We had a really good chance of getting a place in the Finals (&amp;amp; a trip to MIT!), if not for some of these reasons -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Two (out of 4) of our team members got bogged down with other college related activities. So it ended with me and @legobridge
carrying the team.&lt;/li&gt;
  &lt;li&gt;Docker problems plagued me throughout the tournament. I lost 3-4 days cumulative in patching, updating, clearing, removing, re-installing docker to run the BattleCode scaffold.&lt;/li&gt;
  &lt;li&gt;A quota of max 4 International teams for the finals (out of the total 16 spots) was implemented for this year.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very honestly, it was the last point that hurt the most. The “International” teams were as a whole way more competitive; most of the top positions in the daily scrimmage rankings were captured by these teams. I understand the reason why it was done (last year had almost nil local presence) but I can’t help feel a bit salty. Mainly due to the fact that despite the other problems, we had a good chance of getting into the Finals, if not for the quota.&lt;/p&gt;

&lt;p&gt;Sigh, quotas are a sticky, volatile and frustrating point for many people in my country, including me, in general(&lt;em&gt;puns&lt;/em&gt;).
However, I can’t deny that the experience was lovely. Every single part of it, from regularly coding upto 20 hours at a stretch, the fun discussions on Twitch and Discord; the strategies and plans hatched and abandoned. It’s something I’ll definitely want to do again next year too.&lt;/p&gt;

&lt;p&gt;Just no Docker again, please.&lt;/p&gt;</content><author><name>TestSubjector</name></author><summary type="html">Another very late post, I know.</summary></entry></feed>